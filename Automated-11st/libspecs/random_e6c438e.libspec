<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20180504 10:33:02" type="library" name="random" format="ROBOT">
<version></version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.</doc>
<kw name="Betavariate">
<arguments>
<arg>alpha</arg>
<arg>beta</arg>
</arguments>
<doc>Beta distribution.

Conditions on the parameters are alpha &gt; 0 and beta &gt; 0.
Returned values range between 0 and 1.</doc>
<tags>
</tags>
</kw>
<kw name="Choice">
<arguments>
<arg>seq</arg>
</arguments>
<doc>Choose a random element from a non-empty sequence.</doc>
<tags>
</tags>
</kw>
<kw name="Expovariate">
<arguments>
<arg>lambd</arg>
</arguments>
<doc>Exponential distribution.

lambd is 1.0 divided by the desired mean.  It should be
nonzero.  (The parameter would be called "lambda", but that is
a reserved word in Python.)  Returned values range from 0 to
positive infinity if lambd is positive, and from negative
infinity to 0 if lambd is negative.</doc>
<tags>
</tags>
</kw>
<kw name="Gammavariate">
<arguments>
<arg>alpha</arg>
<arg>beta</arg>
</arguments>
<doc>Gamma distribution.  Not the gamma function!

Conditions on the parameters are alpha &gt; 0 and beta &gt; 0.

The probability distribution function is:

            x ** (alpha - 1) * math.exp(-x / beta)
  pdf(x) =  --------------------------------------
              math.gamma(alpha) * beta ** alpha</doc>
<tags>
</tags>
</kw>
<kw name="Gauss">
<arguments>
<arg>mu</arg>
<arg>sigma</arg>
</arguments>
<doc>Gaussian distribution.

mu is the mean, and sigma is the standard deviation.  This is
slightly faster than the normalvariate() function.

Not thread-safe without a lock around calls.</doc>
<tags>
</tags>
</kw>
<kw name="Getstate">
<arguments>
</arguments>
<doc>Return internal state; can be passed to setstate() later.</doc>
<tags>
</tags>
</kw>
<kw name="Jumpahead">
<arguments>
<arg>n</arg>
</arguments>
<doc>Change the internal state to one that is likely far away
from the current state.  This method will not be in Py3.x,
so it is better to simply reseed.</doc>
<tags>
</tags>
</kw>
<kw name="Lognormvariate">
<arguments>
<arg>mu</arg>
<arg>sigma</arg>
</arguments>
<doc>Log normal distribution.

If you take the natural logarithm of this distribution, you'll get a
normal distribution with mean mu and standard deviation sigma.
mu can have any value, and sigma must be greater than zero.</doc>
<tags>
</tags>
</kw>
<kw name="Normalvariate">
<arguments>
<arg>mu</arg>
<arg>sigma</arg>
</arguments>
<doc>Normal distribution.

mu is the mean, and sigma is the standard deviation.</doc>
<tags>
</tags>
</kw>
<kw name="Paretovariate">
<arguments>
<arg>alpha</arg>
</arguments>
<doc>Pareto distribution.  alpha is the shape parameter.</doc>
<tags>
</tags>
</kw>
<kw name="Randint">
<arguments>
<arg>a</arg>
<arg>b</arg>
</arguments>
<doc>Return random integer in range [a, b], including both end points.</doc>
<tags>
</tags>
</kw>
<kw name="Randrange">
<arguments>
<arg>start</arg>
<arg>stop=None</arg>
<arg>step=1</arg>
<arg>_int=&lt;type 'int'&gt;</arg>
<arg>_maxwidth=9007199254740992</arg>
</arguments>
<doc>Choose a random item from range(start, stop[, step]).

This fixes the problem with randint() which includes the
endpoint; in Python this is usually not what you want.</doc>
<tags>
</tags>
</kw>
<kw name="Sample">
<arguments>
<arg>population</arg>
<arg>k</arg>
</arguments>
<doc>Chooses k unique random elements from a population sequence.

Returns a new list containing elements from the population while
leaving the original population unchanged.  The resulting list is
in selection order so that all sub-slices will also be valid random
samples.  This allows raffle winners (the sample) to be partitioned
into grand prize and second place winners (the subslices).

Members of the population need not be hashable or unique.  If the
population contains repeats, then each occurrence is a possible
selection in the sample.

To choose a sample in a range of integers, use xrange as an argument.
This is especially fast and space efficient for sampling from a
large population:   sample(xrange(10000000), 60)</doc>
<tags>
</tags>
</kw>
<kw name="Seed">
<arguments>
<arg>a=None</arg>
</arguments>
<doc>Initialize internal state of the random number generator.

None or no argument seeds from current time or from an operating
system specific randomness source if available.

If a is not None or is an int or long, hash(a) is used instead.
Hash values for some types are nondeterministic when the
PYTHONHASHSEED environment variable is enabled.</doc>
<tags>
</tags>
</kw>
<kw name="Setstate">
<arguments>
<arg>state</arg>
</arguments>
<doc>Restore internal state from object returned by getstate().</doc>
<tags>
</tags>
</kw>
<kw name="Shuffle">
<arguments>
<arg>x</arg>
<arg>random=None</arg>
</arguments>
<doc>x, random=random.random -&gt; shuffle list x in place; return None.

Optional arg random is a 0-argument function returning a random
float in [0.0, 1.0); by default, the standard random.random.</doc>
<tags>
</tags>
</kw>
<kw name="Triangular">
<arguments>
<arg>low=0.0</arg>
<arg>high=1.0</arg>
<arg>mode=None</arg>
</arguments>
<doc>Triangular distribution.

Continuous distribution bounded by given lower and upper limits,
and having a given mode value in-between.

http://en.wikipedia.org/wiki/Triangular_distribution</doc>
<tags>
</tags>
</kw>
<kw name="Uniform">
<arguments>
<arg>a</arg>
<arg>b</arg>
</arguments>
<doc>Get a random number in the range [a, b) or [a, b] depending on rounding.</doc>
<tags>
</tags>
</kw>
<kw name="Vonmisesvariate">
<arguments>
<arg>mu</arg>
<arg>kappa</arg>
</arguments>
<doc>Circular data distribution.

mu is the mean angle, expressed in radians between 0 and 2*pi, and
kappa is the concentration parameter, which must be greater than or
equal to zero.  If kappa is equal to zero, this distribution reduces
to a uniform random angle over the range 0 to 2*pi.</doc>
<tags>
</tags>
</kw>
<kw name="Weibullvariate">
<arguments>
<arg>alpha</arg>
<arg>beta</arg>
</arguments>
<doc>Weibull distribution.

alpha is the scale parameter and beta is the shape parameter.</doc>
<tags>
</tags>
</kw>
</keywordspec>
