<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20180504 10:33:03" type="library" name="random.WichmannHill" format="ROBOT">
<version></version>
<scope>test case</scope>
<namedargs>yes</namedargs>
<doc>Documentation for test library ``random.WichmannHill``.</doc>
<init>
<arguments>
<arg>x=None</arg>
</arguments>
<doc>Initialize an instance.

Optional argument x controls seeding, as for Random.seed().</doc>
<tags>
</tags>
</init>
<kw name="Betavariate">
<arguments>
<arg>alpha</arg>
<arg>beta</arg>
</arguments>
<doc>Beta distribution.

Conditions on the parameters are alpha &gt; 0 and beta &gt; 0.
Returned values range between 0 and 1.</doc>
<tags>
</tags>
</kw>
<kw name="Choice">
<arguments>
<arg>seq</arg>
</arguments>
<doc>Choose a random element from a non-empty sequence.</doc>
<tags>
</tags>
</kw>
<kw name="Expovariate">
<arguments>
<arg>lambd</arg>
</arguments>
<doc>Exponential distribution.

lambd is 1.0 divided by the desired mean.  It should be
nonzero.  (The parameter would be called "lambda", but that is
a reserved word in Python.)  Returned values range from 0 to
positive infinity if lambd is positive, and from negative
infinity to 0 if lambd is negative.</doc>
<tags>
</tags>
</kw>
<kw name="Gammavariate">
<arguments>
<arg>alpha</arg>
<arg>beta</arg>
</arguments>
<doc>Gamma distribution.  Not the gamma function!

Conditions on the parameters are alpha &gt; 0 and beta &gt; 0.

The probability distribution function is:

            x ** (alpha - 1) * math.exp(-x / beta)
  pdf(x) =  --------------------------------------
              math.gamma(alpha) * beta ** alpha</doc>
<tags>
</tags>
</kw>
<kw name="Gauss">
<arguments>
<arg>mu</arg>
<arg>sigma</arg>
</arguments>
<doc>Gaussian distribution.

mu is the mean, and sigma is the standard deviation.  This is
slightly faster than the normalvariate() function.

Not thread-safe without a lock around calls.</doc>
<tags>
</tags>
</kw>
<kw name="Getstate">
<arguments>
</arguments>
<doc>Return internal state; can be passed to setstate() later.</doc>
<tags>
</tags>
</kw>
<kw name="Jumpahead">
<arguments>
<arg>n</arg>
</arguments>
<doc>Act as if n calls to random() were made, but quickly.

n is an int, greater than or equal to 0.

Example use:  If you have 2 threads and know that each will
consume no more than a million random numbers, create two Random
objects r1 and r2, then do
    r2.setstate(r1.getstate())
    r2.jumpahead(1000000)
Then r1 and r2 will use guaranteed-disjoint segments of the full
period.</doc>
<tags>
</tags>
</kw>
<kw name="Lognormvariate">
<arguments>
<arg>mu</arg>
<arg>sigma</arg>
</arguments>
<doc>Log normal distribution.

If you take the natural logarithm of this distribution, you'll get a
normal distribution with mean mu and standard deviation sigma.
mu can have any value, and sigma must be greater than zero.</doc>
<tags>
</tags>
</kw>
<kw name="Normalvariate">
<arguments>
<arg>mu</arg>
<arg>sigma</arg>
</arguments>
<doc>Normal distribution.

mu is the mean, and sigma is the standard deviation.</doc>
<tags>
</tags>
</kw>
<kw name="Paretovariate">
<arguments>
<arg>alpha</arg>
</arguments>
<doc>Pareto distribution.  alpha is the shape parameter.</doc>
<tags>
</tags>
</kw>
<kw name="Randint">
<arguments>
<arg>a</arg>
<arg>b</arg>
</arguments>
<doc>Return random integer in range [a, b], including both end points.</doc>
<tags>
</tags>
</kw>
<kw name="Random">
<arguments>
</arguments>
<doc>Get the next random number in the range [0.0, 1.0).</doc>
<tags>
</tags>
</kw>
<kw name="Randrange">
<arguments>
<arg>start</arg>
<arg>stop=None</arg>
<arg>step=1</arg>
<arg>_int=&lt;type 'int'&gt;</arg>
<arg>_maxwidth=9007199254740992</arg>
</arguments>
<doc>Choose a random item from range(start, stop[, step]).

This fixes the problem with randint() which includes the
endpoint; in Python this is usually not what you want.</doc>
<tags>
</tags>
</kw>
<kw name="Sample">
<arguments>
<arg>population</arg>
<arg>k</arg>
</arguments>
<doc>Chooses k unique random elements from a population sequence.

Returns a new list containing elements from the population while
leaving the original population unchanged.  The resulting list is
in selection order so that all sub-slices will also be valid random
samples.  This allows raffle winners (the sample) to be partitioned
into grand prize and second place winners (the subslices).

Members of the population need not be hashable or unique.  If the
population contains repeats, then each occurrence is a possible
selection in the sample.

To choose a sample in a range of integers, use xrange as an argument.
This is especially fast and space efficient for sampling from a
large population:   sample(xrange(10000000), 60)</doc>
<tags>
</tags>
</kw>
<kw name="Seed">
<arguments>
<arg>a=None</arg>
</arguments>
<doc>Initialize internal state from hashable object.

None or no argument seeds from current time or from an operating
system specific randomness source if available.

If a is not None or an int or long, hash(a) is used instead.

If a is an int or long, a is used directly.  Distinct values between
0 and 27814431486575L inclusive are guaranteed to yield distinct
internal states (this guarantee is specific to the default
Wichmann-Hill generator).</doc>
<tags>
</tags>
</kw>
<kw name="Setstate">
<arguments>
<arg>state</arg>
</arguments>
<doc>Restore internal state from object returned by getstate().</doc>
<tags>
</tags>
</kw>
<kw name="Shuffle">
<arguments>
<arg>x</arg>
<arg>random=None</arg>
</arguments>
<doc>x, random=random.random -&gt; shuffle list x in place; return None.

Optional arg random is a 0-argument function returning a random
float in [0.0, 1.0); by default, the standard random.random.</doc>
<tags>
</tags>
</kw>
<kw name="Triangular">
<arguments>
<arg>low=0.0</arg>
<arg>high=1.0</arg>
<arg>mode=None</arg>
</arguments>
<doc>Triangular distribution.

Continuous distribution bounded by given lower and upper limits,
and having a given mode value in-between.

http://en.wikipedia.org/wiki/Triangular_distribution</doc>
<tags>
</tags>
</kw>
<kw name="Uniform">
<arguments>
<arg>a</arg>
<arg>b</arg>
</arguments>
<doc>Get a random number in the range [a, b) or [a, b] depending on rounding.</doc>
<tags>
</tags>
</kw>
<kw name="Vonmisesvariate">
<arguments>
<arg>mu</arg>
<arg>kappa</arg>
</arguments>
<doc>Circular data distribution.

mu is the mean angle, expressed in radians between 0 and 2*pi, and
kappa is the concentration parameter, which must be greater than or
equal to zero.  If kappa is equal to zero, this distribution reduces
to a uniform random angle over the range 0 to 2*pi.</doc>
<tags>
</tags>
</kw>
<kw name="Weibullvariate">
<arguments>
<arg>alpha</arg>
<arg>beta</arg>
</arguments>
<doc>Weibull distribution.

alpha is the scale parameter and beta is the shape parameter.</doc>
<tags>
</tags>
</kw>
<kw name="Whseed">
<arguments>
<arg>a=None</arg>
</arguments>
<doc>Seed from hashable object's hash code.

None or no argument seeds from current time.  It is not guaranteed
that objects with distinct hash codes lead to distinct internal
states.

This is obsolete, provided for compatibility with the seed routine
used prior to Python 2.1.  Use the .seed() method instead.</doc>
<tags>
</tags>
</kw>
</keywordspec>
